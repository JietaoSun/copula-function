

% Weighted Version of t2!

% 1. Extract weighted residual data for each monitoring point
Monitor = readmatrix('Monitoring point residual data_2.xlsx'); % Read data from the file 'Monitoring Point Residual Data.xlsx'
X1_weighted = Monitor(:, 1); % Extract the first column of the matrix 'Monitor' as the residual data
X2_weighted = Monitor(:, 2); % Extract the second column of the matrix 'Monitor' as the residual data
X3_weighted = Monitor(:, 3); % Extract the third column of the matrix 'Monitor' as the residual data
X4_weighted = Monitor(:, 4); % Extract the fourth column of the matrix 'Monitor' as the residual data

% Weighted kernel density estimation function
[f_kx1_weighted, ~, u1_weighted] = ksdensity(X1_weighted);
[f_kx2_weighted, ~, u2_weighted] = ksdensity(X2_weighted);
[f_kx3_weighted, ~, u3_weighted] = ksdensity(X3_weighted);
[f_kx4_weighted, ~, u4_weighted] = ksdensity(X4_weighted);

% Weighted kernel distribution estimation function
[F_kx1_weighted, x1c_weighted] = ksdensity(X1_weighted, 'function', 'cdf');
[F_kx2_weighted, x2c_weighted] = ksdensity(X2_weighted, 'function', 'cdf');
[F_kx3_weighted, x3c_weighted] = ksdensity(X3_weighted, 'function', 'cdf');
[F_kx4_weighted, x4c_weighted] = ksdensity(X4_weighted, 'function', 'cdf');

% Calculate the kernel density function value at any point xiq on the weighted residual data Xi
f_kx1q_weighted = interp1(x1c_weighted, f_kx1_weighted, X1);
f_kx2q_weighted = interp1(x2c_weighted, f_kx2_weighted, X2);
f_kx3q_weighted = interp1(x3c_weighted, f_kx3_weighted, X3);
f_kx4q_weighted = interp1(x4c_weighted, f_kx4_weighted, X4);

% Calculate the kernel distribution function value at any point xiq on the weighted residual data Xi
F_kx1q_weighted = interp1(x1c_weighted, F_kx1_weighted, X1, 'previous');
F_kx2q_weighted = interp1(x2c_weighted, F_kx2_weighted, X2, 'previous');
F_kx3q_weighted = interp1(x3c_weighted, F_kx3_weighted, X3, 'previous');
F_kx4q_weighted = interp1(x4c_weighted, F_kx4_weighted, X4, 'previous');

%%

% Restating the edge distribution functions generated by t1
% Transpose 1-row-100-column matrices F_kx1\F_kx2\F_kx3\F_kx4 to 100-row-1-column Fkx1\Fkx2\Fkx3\Fkx4
Fkx1_weighted = F_kx1_weighted';
Fkx2_weighted = F_kx2_weighted';
Fkx3_weighted = F_kx3_weighted';
Fkx4_weighted = F_kx4_weighted';

% Combine the weighted kernel distribution estimate values Fkx1_weighted, Fkx2_weighted, Fkx3_weighted, Fkx4_weighted (forming n rows and 1 column) into a 4-dimensional random vector, resulting in a 100*4 matrix
U_weighted = [Fkx1_weighted(:), Fkx2_weighted(:), Fkx3_weighted(:), Fkx4_weighted(:)];

% Combine the weighted kernel distribution function values F_kx1q_weighted, F_kx2q_weighted, F_kx3q_weighted, F_kx4q_weighted (forming n rows and 1 column) into a 4-dimensional random vector, resulting in an n*4 matrix
T_weighted = [F_kx1q_weighted, F_kx2q_weighted, F_kx3q_weighted, F_kx4q_weighted];

%%

% 1. Calculate the Multivariate Gaussian Copula

% Solve for the unknown parameter matrix (Pearson linear correlation coefficient matrix) of the Multivariate Gaussian Copula
Gaussian_Pearson_weighted = copulafit('Gaussian', U_weighted); % Gaussian_Pearson is the unknown parameter matrix (Pearson linear correlation coefficients)
% Calculate AIC and BIC for the Gumbel distribution of kernel distribution estimate values F_kx1\F_kx2\F_kx3\F_kx4
[aic_k_gaussian4D_weighted, bic_k_gaussian4D_weighted] = gaussian_copula4D_aic_bic(U_weighted, Gaussian_Pearson_weighted);
% Calculate the cumulative distribution and probability density functions of the Gumbel distribution for kernel distribution estimate values F_kx1\F_kx2\F_kx3\F_kx4
[F_k_Gaussian_weighted, f_k_Gaussian_weighted] = copulacdf('Gaussian', U_weighted, Gaussian_Pearson_weighted);
% Calculate AIC and BIC for the observed marginal distribution values F_kx1q, F_kx2q, F_kx3q, and F_kx4q
[aic_gaussian4D_weighted, bic_gaussian4D_weighted] = gaussian_copula4D_aic_bic(T_weighted, Gaussian_Pearson_weighted);
% Calculate the cumulative distribution and probability density functions of the Gumbel distribution for observed marginal distribution values F_kx1q, F_kx2q, F_kx3q, and F_kx4q
[F_Gaussian_weighted, f_Gaussian_weighted] = copulacdf('Gaussian', T_weighted, Gaussian_Pearson_weighted);

%%

% 2. Calculate the Multivariate t Copula

% Solve for the unknown parameter matrix (Pearson linear correlation coefficient matrix) of the Multivariate t Copula
[t_Pearson_weighted, nuhat_weighted] = copulafit('t', U_weighted); % nuhat is the degrees of freedom for the t Copula function. Note: If the data size is too small or there is strong data dependence, the result may not be available. t_Pearson is the unknown parameter matrix.
% Calculate AIC and BIC for the Gumbel distribution of kernel distribution estimate values F_kx1\F_kx2\F_kx3\F_kx4
[aic_k_t4D_weighted, bic_k_t4D_weighted] = t_copula4D_aic_bic(U_weighted, t_Pearson_weighted, nuhat_weighted);
% Calculate the cumulative distribution and probability density functions of the Gumbel distribution for kernel distribution estimate values F_kx1\F_kx2\F_kx3\F_kx4
[F_k_t_weighted, f_k_t_weighted] = copulacdf('t', U_weighted, t_Pearson_weighted, nuhat_weighted);
% Calculate AIC and BIC for the observed marginal distribution values F_kx1q, F_kx2q, F_kx3q, and F_kx4q
[aic_t4D_weighted, bic_t4D_weighted] = t_copula4D_aic_bic(T_weighted, t_Pearson_weighted, nuhat_weighted);
% Calculate the cumulative distribution and probability density functions of the Gumbel distribution for observed marginal distribution values F_kx1q, F_kx2q, F_kx3q, and F_kx4q
[F_t_weighted, f_t_weighted] = copulacdf('t', T_weighted, t_Pearson_weighted, nuhat_weighted);






